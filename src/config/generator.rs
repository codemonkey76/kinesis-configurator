use crate::config::KeyboardConfig;
use anyhow::Result;

pub struct Generator;

impl Generator {
    pub fn generate(config: &KeyboardConfig) -> Result<String> {
        let mut output = String::new();

        output.push_str("# Generated by Kinesis Configurator\n\n");

        // Generate each layout
        for layout in &config.layouts {
            if !layout.remaps.is_empty() {
                output.push_str(&format!("[layout_{}]\n", layout.id));
                for (from, to) in &layout.remaps {
                    output.push_str(&format!("{}={}\n", from, to));
                }
                output.push('\n');
            }
        }

        // Generate macros
        if !config.macros.is_empty() {
            output.push_str("[macros]\n");
            for mac in &config.macros {
                output.push_str(&format!(
                    "{}={}={}\n",
                    mac.name,
                    mac.trigger,
                    mac.sequence.join(",")
                ));
            }
            output.push('\n');
        }

        Ok(output)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_generate_empty() {
        let config = KeyboardConfig::new();
        let output = Generator::generate(&config).unwrap();
        assert!(output.contains("# Generated by Kinesis Configurator"));
    }
}
